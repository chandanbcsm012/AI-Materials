# -*- coding: utf-8 -*-
"""classification nn digit dataset.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YSR_Tvhm8w_picFDRH5Pb1Wco1dg16O5

binary class = sigmoid act. at output

multiclass = softmax act. at output

dataset= digit dataset 20000 samples, image size 28x28
"""


import pandas as pd
import numpy as np
from sklearn.metrics import accuracy_score
df=pd.read_csv('sample_data/mnist_train_small.csv',header=None)
df.head()
X=df.iloc[:,1:].values
y=df.iloc[:,0].values
df[0].value_counts()
import tensorflow as tf

def output_neuron(X,w,b):
  return tf.matmul(X,w)+b

def loss(y_true,logits):
  return tf.reduce_mean(tf.losses.sparse_categorical_crossentropy(y_true,logits))

def activation_hidden(ynet):
  return tf.nn.tanh(ynet)

def activation_output(ynet):
  return tf.nn.softmax(ynet)

tf.random.set_seed(10)

wh1=tf.Variable(tf.random.truncated_normal(shape=[784,256],dtype=tf.double))
bh1=tf.Variable(tf.random.truncated_normal(shape=[256],dtype=tf.double))

wh2=tf.Variable(tf.random.truncated_normal(shape=[256,128],dtype=tf.double))
bh2=tf.Variable(tf.random.truncated_normal(shape=[128],dtype=tf.double))

wo=tf.Variable(tf.random.truncated_normal(shape=[128,10],dtype=tf.double))
bo=tf.Variable(tf.random.truncated_normal(shape=[10],dtype=tf.double))

from sklearn.preprocessing import StandardScaler
sc=StandardScaler()

X_new=sc.fit_transform(X)

optimizer=tf.optimizers.SGD(learning_rate=.9)
for epoch in range(2000):
    
  with tf.GradientTape() as tape:
    ynet=output_neuron(X_new,wh1,bh1)
    logits=activation_hidden(ynet)

    ynet=output_neuron(logits,wh2,bh2)
    logits=activation_hidden(ynet)

    ynet=output_neuron(logits,wo,bo)
    logits=activation_output(ynet)

    ls=loss(y,logits)
    yhat=tf.argmax(logits,1)
    if epoch%10==0:
     print(epoch,"\t loss:",ls.numpy(),"\t Score:","{:.10%}".format(accuracy_score(y,yhat.numpy())))
    gradients=tape.gradient(ls,[wo,bo,wh2,bh2,wh1,bh1])
    optimizer.apply_gradients(zip(gradients,[wo,bo,wh2,bh2,wh1,bh1]))

df_test=pd.read_csv('sample_data/mnist_test.csv',header=None)
df_test.shape

X_test=df_test.iloc[:,1:].values
y_test=df_test.iloc[:,0].values
X_test_new=sc.transform(X_test)

ynet=output_neuron(X_test_new,wh1,bh1)
logits=activation_hidden(ynet)

ynet=output_neuron(logits,wh2,bh2)
logits=activation_hidden(ynet)

ynet=output_neuron(logits,wo,bo)
logits=activation_output(ynet)

ls=loss(y_test,logits)
yhat=tf.argmax(logits,1)

print("Loss:",ls,'\t',"Score:",accuracy_score(y_test,yhat))

