#consider 2 given sequences & output seq
seq1 = np.array([10, 20, 30, 40, 50, 60, 70, 80, 90])
seq2 = np.array([15, 25, 35, 45, 55, 65, 75, 85, 95])

#output sequence is element wise sum of seq1,seq2
out_seq = np.array([25, 45, 65, 85, 105, 125, 145, 165, 185])

#objective is to find next element in output seq if next elements are 100,105 in seq1,seq2 respectively 

#step1:combine all 3 sequences into one 2d-array
sequences=[]
for i in range(0,9):#len of seq
	tmp_seq=[seq1[i],seq2[i],out_seq[i]]
	sequences.append(tmp_seq)
sequences=np.array(sequences) 
print(sequences)


step2:obtain X,y according time steps
If we chose three input time steps, then the first sample would look as follows:
Input:
10, 15
20, 25
30, 35

Output:
65

#split sequence into inputs and outputs
def split_sequences(sequences, n_steps):
	X, y = list(), list()
	for i in range(len(sequences)):
		# find the end of this pattern
		end_ix = i + n_steps
		# check if we are beyond the dataset
		if end_ix > len(sequences):
			break
		# gather input and output parts of the pattern
		seq_x, seq_y = sequences[i:end_ix, :-1], sequences[end_ix-1, -1]
		X.append(seq_x)
		y.append(seq_y)
	return array(X), array(y)

X,y=split_sequences(sequences,3)
print(X)
print(y)

here samples=7
n_steps=3
n_features=2(2 parallel series)

model=Sequential()
model.add(LSTM(100,activation='relu',input_shape=(3,2)))
model.add(Dense(1))
model.compile('adam','mse')
model.fit(X,y,epochs=300,verbose=0)
model.predict(np.array([[80, 85], [90, 95], [100, 105]]).reshape(1,3,2))