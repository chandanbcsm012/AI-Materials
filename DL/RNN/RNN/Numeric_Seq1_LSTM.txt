#consider this given sequence
seq=[10,20,30,40,50,60,70,80,90]

#objective is to find next element in this sequence 

#now convert it into according to time step,let's consider time step=3

import numpy as np
X=np.array([
     [10,20,30],
     [20,30,40],
     [30,40,50],
     [40,50,60],
     [50,60,70],
     [60,70,80]
  ])
y=np.array([40,50,60,70,80,90])

or

function that takes raw sequence & n_steps as args and returns X,y

def split_sequence(sequence, n_steps):
	X, y = list(), list()
	for i in range(len(sequence)):
		# find the end of this pattern
		end_ix = i + n_steps
		# check if we are beyond the sequence
		if end_ix > len(sequence)-1:
			break
		# gather input and output parts of the pattern
		seq_x, seq_y = sequence[i:end_ix], sequence[end_ix]
		X.append(seq_x)
		y.append(seq_y)
	return array(X), array(y)


LSTM layer will ask input_shape(n_step,n_features),we pass X with shape(samples,n_step,n_features)
here samples=6, n_step=3,n_features=1(no of series)


from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM,Dense

model=Sequential()
model.add(LSTM(100,activation='relu',input_shape=(3,1)))
model.add(Dense(1))
model.compile('adam','mse')
model.fit(X.reshape(X.shape[0],X.shape[1],1),y,epochs=300,verbose=0)
model.predict(np.array([[70,80,90]]).reshape(1,3,1))


