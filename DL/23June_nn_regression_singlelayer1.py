# -*- coding: utf-8 -*-
"""NN_Regression_SingleLayer1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EA8PnKCgMsdquyIIbgMkPkoeImNCZvzj
"""

import pandas as pd
import tensorflow as tf

df=pd.read_csv('sample_data/california_housing_train.csv')
X=df.iloc[:,:-1].values
y=df.iloc[:,-1].values

from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error,r2_score
lr=LinearRegression()
lr.fit(X,y)
pred=lr.predict(X)
print("Score:",lr.score(X,y))
print("Loss:",mean_squared_error(y,pred))
lr.coef_

def output_neuron(X,w,b):
  return tf.matmul(X,w)+b

def loss(y_true,y_pred):
  return tf.losses.mean_squared_error(y_true,y_pred)

w=tf.Variable(tf.ones(shape=[8,1],dtype=tf.double))
b=tf.Variable(tf.ones(shape=[1,1],dtype=tf.double))

yhat=output_neuron(X,w,b)
yhat=tf.reshape(yhat,[-1])#flatten the tensor yhat
ls=loss(y,yhat)
print(ls)
print("Score:",r2_score(y,yhat.numpy()))

w=tf.Variable(tf.ones(shape=[8,1],dtype=tf.double))
b=tf.Variable(tf.ones(shape=[1,1],dtype=tf.double))
X=df.iloc[:,:-1].values
y=df.iloc[:,-1].values
from sklearn.preprocessing import StandardScaler
sc=StandardScaler()
X_new=sc.fit_transform(X)
for epoch in range(2000):
  with tf.GradientTape() as tape:
    yhat=output_neuron(X_new,w,b)
    yhat=tf.reshape(yhat,[-1])#flatten the tensor yhat
    ls=loss(y,yhat)
    if(epoch%100==0):
      print("Loss:",ls,"\t","Score:",r2_score(y,yhat.numpy()))
    dw,db=tape.gradient(ls,[w,b])
    w.assign_sub(.1*dw)
    b.assign_sub(.1*db)

w.numpy()

